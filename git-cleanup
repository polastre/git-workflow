#!/usr/bin/env python
#
# git-cleanup
#
# Removes all branches that are fully merged, except master and the current
# working branch.
#

import os
import git
import util
import re

current = re.compile('^\* ')

try:
  repo = git.Repo(os.getcwd(), search_parent_directories=True)
except git.exc.InvalidGitRepositoryError:
  util.fatal('git cleanup must be run from within a valid git repository.')

util.fatal_if_dirty(repo)

local_count = 0
branches = repo.git.branch('--merged', 'master')
for line in branches.splitlines():
  branch = line.strip()
  if not current.match(branch) and branch != 'master':
    util.info('Removing %s' % branch)
    repo.git.branch('-d', branch)
    local_count += 1

remote_count = 0
branches = repo.git.branch('-r', '--merged', 'master')
for line in branches.splitlines():
  branch = line.strip().lstrip('origin/')
  if 'master' not in branch:
    util.info('Removing origin/%s' % branch)
    repo.git.push('--delete', 'origin', branch)
    remote_count += 1

if local_count == 0 and remote_count == 0:
  util.success('No stale branches detected')
else:
  util.success('Removed %d local and %d remote branches' % (local_count, remote_count))
